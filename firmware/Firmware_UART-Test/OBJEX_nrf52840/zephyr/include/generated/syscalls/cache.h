/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_CACHE_H
#define Z_INCLUDE_SYSCALLS_CACHE_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_sys_cache_data_all(int op);

__pinned_func
static inline int sys_cache_data_all(int op)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; int val; } parm0 = { .val = op };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_SYS_CACHE_DATA_ALL);
	}
#endif
	compiler_barrier();
	return z_impl_sys_cache_data_all(op);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define sys_cache_data_all(op) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_SYS_CACHE_DATA_ALL, sys_cache_data_all, op); 	retval = sys_cache_data_all(op); 	sys_port_trace_syscall_exit(K_SYSCALL_SYS_CACHE_DATA_ALL, sys_cache_data_all, op, retval); 	retval; })
#endif
#endif


extern int z_impl_sys_cache_data_range(void * addr, size_t size, int op);

__pinned_func
static inline int sys_cache_data_range(void * addr, size_t size, int op)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; void * val; } parm0 = { .val = addr };
		union { uintptr_t x; size_t val; } parm1 = { .val = size };
		union { uintptr_t x; int val; } parm2 = { .val = op };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_SYS_CACHE_DATA_RANGE);
	}
#endif
	compiler_barrier();
	return z_impl_sys_cache_data_range(addr, size, op);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define sys_cache_data_range(addr, size, op) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_SYS_CACHE_DATA_RANGE, sys_cache_data_range, addr, size, op); 	retval = sys_cache_data_range(addr, size, op); 	sys_port_trace_syscall_exit(K_SYSCALL_SYS_CACHE_DATA_RANGE, sys_cache_data_range, addr, size, op, retval); 	retval; })
#endif
#endif


extern int z_impl_sys_cache_instr_all(int op);

__pinned_func
static inline int sys_cache_instr_all(int op)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; int val; } parm0 = { .val = op };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_SYS_CACHE_INSTR_ALL);
	}
#endif
	compiler_barrier();
	return z_impl_sys_cache_instr_all(op);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define sys_cache_instr_all(op) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_SYS_CACHE_INSTR_ALL, sys_cache_instr_all, op); 	retval = sys_cache_instr_all(op); 	sys_port_trace_syscall_exit(K_SYSCALL_SYS_CACHE_INSTR_ALL, sys_cache_instr_all, op, retval); 	retval; })
#endif
#endif


extern int z_impl_sys_cache_instr_range(void * addr, size_t size, int op);

__pinned_func
static inline int sys_cache_instr_range(void * addr, size_t size, int op)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; void * val; } parm0 = { .val = addr };
		union { uintptr_t x; size_t val; } parm1 = { .val = size };
		union { uintptr_t x; int val; } parm2 = { .val = op };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_SYS_CACHE_INSTR_RANGE);
	}
#endif
	compiler_barrier();
	return z_impl_sys_cache_instr_range(addr, size, op);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define sys_cache_instr_range(addr, size, op) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_SYS_CACHE_INSTR_RANGE, sys_cache_instr_range, addr, size, op); 	retval = sys_cache_instr_range(addr, size, op); 	sys_port_trace_syscall_exit(K_SYSCALL_SYS_CACHE_INSTR_RANGE, sys_cache_instr_range, addr, size, op, retval); 	retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
